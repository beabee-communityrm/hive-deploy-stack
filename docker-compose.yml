version: '3.4'

# Logging environment variables
x-logging-env: &logging-env
  hive_stack: ${COMPOSE_PROJECT_NAME}
  hive_service: # Set by each service

# Base app configuration
x-base-app: &base-app
  env_file:
    - stack.env
  networks:
    - internal
    - db-network
  logging:
    driver: gelf
    options:
      gelf-address: "udp://127.0.0.1:12201"
      env: hive_stack,hive_service

# Service app configuration
x-service-app: &service-app
  <<: *base-app
  restart: unless-stopped
  depends_on:
    migration:
      condition: service_completed_successfully

services:

  # Backend services
  app:
    <<: *service-app
    image: beabee/beabee-legacy-app:dev
    environment:
      <<: *logging-env
      hive_service: app

  api_app:
    <<: *service-app
    image: beabee/beabee-api-app:dev
    environment:
      <<: *logging-env
      hive_service: api_app

  webhook_app:
    <<: *service-app
    image: beabee/beabee-webhook-app:dev
    environment:
      <<: *logging-env
      hive_service: webhook_app

  cron_app:
    <<: *service-app
    image: beabee/beabee-cron-app:dev
    environment:
      <<: *logging-env
      hive_service: cron

  img_upload_app:
    image: beabee/pictshare:v0.2.0
    restart: unless-stopped
    environment:
      URL: ${BEABEE_AUDIENCE}/uploads/
    volumes:
      - upload_data:/var/www/data
    networks:
      - internal

  # Migration service
  migration:
    <<: *base-app
    image: beabee/beabee-api-app:dev
    command: 'npm run typeorm migration:run'
    environment:
      <<: *logging-env
      hive_service: migration

  # Helper to run commands (GELF logging disabled)
  run:
    <<: *base-app
    image: beabee/beabee-api-app:dev
    profiles:
      - tools
    logging:
      driver: none

  # Frontend service
  frontend:
    image: beabee/beabee-frontend:dev
    restart: unless-stopped
    environment:
      APP_BASE_URL: ${BEABEE_AUDIENCE}
      API_BASE_URL: /api/1.0
      CNR_MODE: ${BEABEE_CNR_MODE-}
      EXPERIMENTAL_FEATURES: ${BEABEE_EXPERIMENTAL_FEATURES-}
      APPSIGNAL_KEY: ${APPSIGNAL_KEY-}
      CAPTCHAFOX_KEY: ${BEABEE_CAPTCHAFOX_KEY-}
      MAPTILER_KEY: ${BEABEE_MAPTILER_KEY-}
    networks:
      - internal

  # Application router
  app_router:
    image: beabee/beabee-router:dev
    restart: unless-stopped
    labels:
      - "traefik.docker.network=traefik-ingress"
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.entryPoints=https"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${BEABEE_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls.certResolver=letsencrypt"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=80"
    environment:
      LEGACY_APP_COOKIE_DOMAIN: ${BEABEE_COOKIE_DOMAIN}
      TRUSTED_ORIGINS: ${BEABEE_TRUSTEDORIGINS-}
    networks:
      - internal
      - traefik-ingress

networks:
  internal:
    driver: bridge
  db-network:
    external: true
  traefik-ingress:
    external: true

volumes:
  upload_data:
